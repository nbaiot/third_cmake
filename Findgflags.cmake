include(FindPackageHandleStandardArgs)

set(CMAKE_FIND_LIBRARY_SUFFIXES_SAV ${CMAKE_FIND_LIBRARY_SUFFIXES})

if (${GFLAGS_USE_STATIC})
    set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX})
    set(SHARED_OR_STATIC "STATIC")
else ()
    set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_SHARED_LIBRARY_SUFFIX})
    set(SHARED_OR_STATIC "SHARED")
endif ()

unset(GFLAGS_LIBRARY CACHE)
find_library(
        GFLAGS_LIBRARY
        NAMES "gflags"
        PATHS ${GFLAGS_INSTALL_PATH}
        PATH_SUFFIXES "lib" "lib64"
        NO_DEFAULT_PATH
        NO_CMAKE_FIND_ROOT_PATH
)

unset(GFLAGS_INCLUDE CACHE)
find_path(GFLAGS_INCLUDE
        NAMES "gflags/gflags.h"
        PATHS ${GFLAGS_INSTALL_PATH}
        PATH_SUFFIXES "include"
        NO_DEFAULT_PATH
        NO_CMAKE_FIND_ROOT_PATH
        )

find_package_handle_standard_args(gflags DEFAULT_MSG GFLAGS_LIBRARY GFLAGS_INCLUDE)

if (GFLAGS_FOUND)
    if (NOT TARGET gflags)
        add_library(gflags ${SHARED_OR_STATIC} IMPORTED GLOBAL)
    endif ()
    set_property(TARGET gflags PROPERTY IMPORTED_LOCATION ${GFLAGS_LIBRARY})
    include_directories(${GFLAGS_INCLUDE})
    set(GFLAGS_INCLUDE_DIRS ${GFLAGS_INCLUDE})
    set(GFLAGS_LIBRARIES ${GFLAGS_LIBRARY})
endif ()

### restore
set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES_SAV})
set(SHARED_OR_STATIC)