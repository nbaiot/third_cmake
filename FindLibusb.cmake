include(FindPackageHandleStandardArgs)

set(CMAKE_FIND_LIBRARY_SUFFIXES_SAV ${CMAKE_FIND_LIBRARY_SUFFIXES})

if (LIBUSB_USE_STATIC)
    set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX})
    set(SHARED_OR_STATIC "STATIC")
else ()
    set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES_SAV})
    set(SHARED_OR_STATIC "SHARED")
endif ()

unset(LIBUSB_LIBRARY CACHE)
find_library(
        LIBUSB_LIBRARY
        NAMES "usb-1.0"
        PATHS ${LIBUSB_INSTALL_PATH}
        PATH_SUFFIXES "lib" "lib64"
        NO_DEFAULT_PATH
        NO_CMAKE_FIND_ROOT_PATH
)

unset(LIBUSB_INCLUDE CACHE)
find_path(LIBUSB_INCLUDE
        NAMES "libusb-1.0/libusb.h"
        PATHS ${LIBUSB_INSTALL_PATH}
        PATH_SUFFIXES "include"
        NO_DEFAULT_PATH
        NO_CMAKE_FIND_ROOT_PATH
        )

find_package_handle_standard_args(Libusb DEFAULT_MSG LIBUSB_LIBRARY LIBUSB_INCLUDE)

if (LIBUSB_FOUND)
    if (NOT TARGET libusb)
        add_library(libusb ${SHARED_OR_STATIC} IMPORTED GLOBAL)
    endif ()
    set_property(TARGET libusb PROPERTY IMPORTED_LOCATION ${LIBUSB_LIBRARY})
    include_directories(${LIBUSB_INCLUDE})
    set(LIBUSB_INCLUDE_DIRS ${LIBUSB_INCLUDE})
    set(LIBUSB_LIBRARIES ${LIBUSB_LIBRARY})
endif ()

### restore
set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES_SAV})
set(SHARED_OR_STATIC)