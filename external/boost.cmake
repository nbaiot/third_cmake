
set(BOOST_COMPONENTS "")
list(APPEND BOOST_COMPONENTS "atomic")
list(APPEND BOOST_COMPONENTS "chrono")
list(APPEND BOOST_COMPONENTS "container")
#list(APPEND BOOST_COMPONENTS "context")
list(APPEND BOOST_COMPONENTS "contract")
#list(APPEND BOOST_COMPONENTS "coroutine")
list(APPEND BOOST_COMPONENTS "date_time")
list(APPEND BOOST_COMPONENTS "exception")
#list(APPEND BOOST_COMPONENTS "fiber")
list(APPEND BOOST_COMPONENTS "filesystem")
list(APPEND BOOST_COMPONENTS "graph")
list(APPEND BOOST_COMPONENTS "graph_parallel")
list(APPEND BOOST_COMPONENTS "iostreams")
list(APPEND BOOST_COMPONENTS "locale")
#list(APPEND BOOST_COMPONENTS "log")
list(APPEND BOOST_COMPONENTS "math")
list(APPEND BOOST_COMPONENTS "program_options")
list(APPEND BOOST_COMPONENTS "random")
list(APPEND BOOST_COMPONENTS "regex")
list(APPEND BOOST_COMPONENTS "serialization")
list(APPEND BOOST_COMPONENTS "stacktrace")
list(APPEND BOOST_COMPONENTS "system")
#list(APPEND BOOST_COMPONENTS "test")
list(APPEND BOOST_COMPONENTS "thread")
list(APPEND BOOST_COMPONENTS "timer")
list(APPEND BOOST_COMPONENTS "type_erasure")
list(APPEND BOOST_COMPONENTS "wave")
#list(APPEND BOOST_COMPONENTS "python")
#list(APPEND BOOST_COMPONENTS "mpi")

set(BOOST_INSTALL_PATH ${THIRD_PARTY_INSTALL_PATH}/boost)

set(BOOST_USE_STATIC TRUE)




find_package(Boost COMPONENTS ${BOOST_COMPONENTS})

if (NOT Boost_FOUND)
    message(STATUS "not find boost, now download and install it.")
    include(${CMAKE_CURRENT_LIST_DIR}/boost_build.cmake)
else ()
    message(STATUS "find boost version:${BOOST_VERSION}")
endif ()
